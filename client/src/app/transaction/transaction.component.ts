import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Location } from '@angular/common';
import {md5} from './md5';
import { FormBuilder, FormGroup, Validators } from  '@angular/forms';
import { AuthService } from '../auth.service';

@Component({
  selector: 'app-transaction',
  templateUrl: './transaction.component.html',
  styleUrls: ['./transaction.component.css']
})
export class TransactionComponent implements OnInit {
  transForm: FormGroup;
  isSubmitted  =  false;
  domainAndApp:string;
  constructor(private loc: Location, private authService: AuthService, private router: Router, private formBuilder: FormBuilder) { }

  ngOnInit(): void {
    this.transForm  =  this.formBuilder.group({
      cardNumber: ['', Validators.required],
      count: ['', Validators.required],
      hash: ['aaa', Validators.required],
    });


    let rr:number[] = [0.077545, -0.021957, 0.266068, 0.391205, -0.236938, -0.453735, 0.104263, 0.233582, 0.457886, 0.756912, 1.288971, 1.083115, 0.563995, 0.209595, 0.182907, 0.329971, 0.336273, 0.276917, 0.334351, 0.359756, 0.344666, 0.390945, 0.462387, 0.683502, 0.902084, 0.865479, 0.960312, 0.929321, 0.665222, 0.505569, 0.41745, 0.209015, 0.21608, 0.189438, 0.25621, 0.254333, 0.166199, 0.095352, 0.006699, 0.161438, 0.475906, 0.518265, 0.351273, 0.098068, -0.099426, -0.104309, -0.072617, -0.03923, -0.036163, 0.111755, 0.482208, 0.86673, 0.803238, 0.525253, 0.138046, -0.13942, 0.093948, 0.610672, -0.109924, -0.645615, 0.004837, 0.348999, 0.40834, 0.705933, 1.186646, 1.061172, 0.561981, 0.272278, 0.157532, 0.210663, 0.32338, 0.279861, 0.383896, 0.460678, 0.474899, 0.422195, 0.383728, 0.438141, 0.511673, 0.694626, 0.817413, 0.835754, 0.867798, 0.713043, 0.579208, 0.613144, 0.304062, 0.24501, 0.169907, 0.294281, 0.372528, 0.270035, 0.21109, 0.141052, 0.123383, 0.331055, 0.48262, 0.338959, 0.157486, -0.014099, -0.063232, -0.080688, -0.094498, -0.05069, -0.032715, 0.27861, 0.853699, 0.930267, 0.540848, 0.188797, -0.162552, 0.131592, 0.608871, 0.21669, -0.599747, -0.405685, 0.34549, 0.370514, 0.614182, 1.16185, 1.153976, 0.77681, 0.354141, 0.197723, 0.28717, 0.25322, 0.270157, 0.353455, 0.471817, 0.477432, 0.388168, 0.328796, 0.392151, 0.469879, 0.630219, 0.854416, 0.911621, 0.947052, 0.890213, 0.559082, 0.480606, 0.200516, 0.038483, 0.100876, 0.193405, 0.239746, 0.208603, 0.16597, 0.138245, 0.128601, 0.351135, 0.59024, 0.423584, 0.201218, 0.09935, -0.044128, -0.010056, -0.055328, -0.045303, -0.067841, 0.196396, 0.669037, 0.899231, 0.666946, 0.274673, 0.016205, 0.321762, 0.772736, -0.005707, -0.692093, -0.346466, 0.145798, 0.34079, 0.490372, 0.985641, 1.096115, 0.877197, 0.357941, 0.191696, 0.268692, 0.394867, 0.40274, 0.470413, 0.43309, 0.358917, 0.44342, 0.430267, 0.461838, 0.540405, 0.709656, 0.856552, 0.997086, 1.035172, 0.659912, 0.179169, 0.08194, 0.213257, -0.08905, -0.250061, -0.094238, 0.121689, 0.056015, -0.089432, -0.103287, 0.202316, 0.471451, 0.630493, 0.495193, 0.241455, 0.017975, -0.098328, -0.114761, -0.033081, 0.17189, 0.27977, 0.285492, 0.24707, 0.336777, 0.582275];
    let rr2:number[] = [0.864944, 0.784119, 0.417038, 0.205109, 0.070526, -0.105591, -0.011124, 0.039627, -0.041046, 0.180542, 0.357391, 0.456955, 0.643997, 0.810944, 0.669403, 0.39859, 0.318481, 0.371338, 0.463196, 0.476089, 0.404327, 0.482758, 0.51178, 0.473068, 0.447968, 0.404495, 0.502197, 0.605072, 0.68541, 0.734238, 0.748184, 0.768799, 0.545578, 0.410492, 0.419128, 0.591736, 0.533051, 0.321442, -0.010513, -0.049149, 0.029861, 0.103699, 0.237961, 0.297699, 0.315445, 0.395782, 0.416916, 0.391235, 0.24707, 0.153214, 0.149246, 0.108185, 0.076904, 0.038788, 0.147934, 0.218002, 0.067581, -0.10228, 0.019745, 0.060455, 0.066772, 0.005875, 0.122894, 0.180283, 0.452332, 0.416382, 0.238892, 0.25032, 0.274933, 0.358032, 0.32373, 0.258133, 0.195389, 0.216095, 0.260208, 0.297546, 0.325577, 0.316269, 0.282272, 0.276123, 0.316483, 0.319305, 0.312332, 0.259964, 0.272308, 0.292786, 0.321365, 0.321075, 0.289719, 0.250626, 0.235229, 0.236084, 0.260101, 0.299866, 0.317978, 0.336105, 0.342087, 0.337036, 0.327911, 0.324417, 0.30571, 0.294357, 0.281342, 0.295731, 0.305496, 0.304901, 0.304047, 0.303329, 0.306824, 0.302521, 0.304642, 0.297455, 0.311295, 0.322311, 0.314606, 0.282883, 0.26973, 0.279556, 0.281067, 0.290863, 0.282883, 0.273666, 0.270462, 0.273621, 0.289017, 0.310806, 0.30983, 0.289139, 0.296036, 0.303986, 0.314255, 0.314224, 0.308487, 0.299973, 0.293488, 0.288391, 0.320435, 0.355072, 0.385117, 0.419571, 0.420319, 0.377533, 0.331772, 0.303131, 0.249939, 0.201874, 0.187988, 0.18338, 0.200089, 0.245087, 0.250122, 0.24115, 0.250488, 0.289734, 0.299774, 0.32486, 0.329559, 0.332489, 0.328201, 0.29985, 0.231766, 0.172653, 0.18045, 0.170776, 0.173965, 0.209198, 0.224411, 0.225006, 0.195709, 0.187073, 0.209503, 0.220291, 0.232727, 0.236343, 0.241348, 0.289429, 0.319977, 0.320648, 0.266602, 0.215469, 0.135406, 0.090637, 0.124863, 0.188629, 0.2901, 0.208221, -0.096008, -0.23996, 0.400162, 0.767578, 0.473831, 0.257675, 0.161041, 0.125641, 0.230316, 0.405624, 0.522949, 0.452499, 0.291153, 0.185287, 0.198944, 0.266144, 0.309082, 0.294205, 0.299225, 0.311722, 0.314865, 0.294205, 0.265259, 0.259644, 0.264603, 0.302109, 0.334351, 0.333069, 0.317703, 0.297546, 0.27327, 0.293518, 0.3461, 0.376251, 0.39418, 0.411667, 0.463242, 0.501343, 0.510986, 0.528595, 0.62619, 0.680252, 0.483124, 0.250061, 0.238571, 0.401413, 0.401199, 0.279282, 0.179337, 0.16478, 0.15506, 0.220779, 0.245285, 0.265808, 0.258102, 0.276001, 0.283401, 0.345642, 0.2845, 0.198074, 0.116074, 0.143326, 0.170868, 0.127579, 0.126266, 0.129608, 0.108719, 0.101135, 0.132431, 0.154739, 0.165573, 0.170303, 0.186218, 0.17189, 0.154968, 0.141144, 0.108948, 0.072983, 0.060089, 0.097702, 0.147842, 0.141373, 0.149445, 0.162506, 0.121246, 0.200119, 0.715485, 0.305176, -0.29158, -0.614929, 0.45369, 0.84729, 0.692139, 0.66272];
    let rasstoyanie = this.MainCalculation(rr, rr2);
    console.log(rasstoyanie);
    const angularRoute = this.loc.path();
    const url = window.location.href;
  
    this.domainAndApp = url.replace(angularRoute, '');
    console.log(this.domainAndApp);
  }

  get formControls() { return this.transForm.controls; }

  send() {
    this.transForm.patchValue({hash: this.authService.security})
    console.log(this.transForm.value);
    this.isSubmitted = true;
    if(this.transForm.invalid) {
      return;
    }
    this.authService.Send(this.transForm).subscribe(resp => {
      console.log(resp);
      this.authService.security = md5(this.domainAndApp+this.authService.security);
    });
    
  }
//Чтобы вычислить расстояние, нужно в функцию MainCalculation(ar1, ar2) передать 2 одномерных массива с данными экселелометра
//Пример:
//rasstoyanie = MainCalculation([1,2,3,4,5], [6,7,8,9,10])
FurieTransform(mas) {
	let i;

	let N = mas.length;
 
 
	let a = 1/Math.sqrt(N);
	let fjRe=[],fjIm=[],fjAm=[],j;
	for(j=0;j<N;j++)
	{
		let sumre = 0,sumim = 0,k;
		for(k=0;k<N;k++)
		{
			sumre += mas[k]*Math.cos(2*Math.PI/N*k*j);  
			sumim += mas[k]*Math.sin(2*Math.PI/N*k*j);
		}
		fjRe[j] = a*sumre;
		fjIm[j] = -a*sumim;
		fjAm[j] = Math.sqrt(fjRe[j]*fjRe[j]+fjIm[j]*fjIm[j]);
	
	}
	return fjAm.slice(0, Math.round(N/2));
}
pickPeaks(array) {
  let res = [{"pos":[], "peaks":[]}];
  let i = 0;
  for(let curr of array) {
    i++;
    if(array[i-1] < 1.5*curr && curr > 1.5*array[i+1] && curr>0.5) {
      res["pos"] = res["pos"] ? res["pos"].concat([i]) : [i];
      res["peaks"] = res["peaks"] ? res["peaks"].concat([curr]) : [curr];
    }
  }
  return res;
  // return array.reduce((res, curr, i, arr) => {
  //   if(arr[i-1] < 1.5*curr && curr > 1.5*arr[i+1] && curr>0.5) {
  //     this.res["pos"] = this.res["pos"] ? this.res["pos"].concat([i]) : [i];
  //     this.res["peaks"] = this.res["peaks"] ? this.res["peaks"].concat([curr]) : [curr];
  //   } 
  //   return this.res;
  // },{});
}
Dist(array1, array2, N1, N2) {
	if(array1.length > array2.length) {
		for(let i = array2.length; i < array1.length; i++) {
			array2[i]=0;
		}
	}
	if(array2.length > array1.length) {
		for(let i = array1.length; i < array2.length; i++) {
			array1[i]=0;
		}
	}
	let r = 0;
	for(let i = 0; i < array1.length; i++) {
		r = r + (array2[i]-array1[i])*(array2[i]-array1[i]);
	}
	
	//новый метод подсчета расстояния
	let r1 = 0;
	let r2 = 0;
	for(let i = 0; i < array1.length; i++) {
		if(r1<N1/25*5) r1 = r1 + array1[i];
	}
	for(let i = 0; i < array2.length; i++) {
		if(r2<N2/25*5) r2 = r2 + array2[i];
	}
	return Math.sqrt((r1-r2)*(r1-r2));
}
MainCalculation(ar1, ar2) {
	//находим фурье спектры
	let F1 = this.FurieTransform(ar1);
	let F2 = this.FurieTransform(ar2);
	
	//Находим пики в спектрах
	let P1 = this.pickPeaks(F1);
	let P2 = this.pickPeaks(F2);
	
	let N1 = F1.length;
	let N2 = F2.length;
	//находим разницу между пиками
  let dist = this.Dist(P1["pos"], P2["pos"], N1, N2);
  console.log(dist);
	return dist;
}

}
